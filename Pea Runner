echo "# Pea-Runner" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/PeaRunner/Pea-Runner.git
git push -u origin main
import pygame
import random
import os

# Initialize Pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600

# Colors
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)

# Game settings
GRAVITY = 0.5
FLAP_STRENGTH = -10
PIPE_WIDTH = 70
PIPE_GAP = 200
PIPE_SPEED = 3

# --- Load images ---
# Assume 'pea.png' is in the same directory as the script
PEA_IMAGE = pygame.image.load('pea.png')
PEA_IMAGE = pygame.transform.scale(PEA_IMAGE, (50, 50))

# Create screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Pea Runner')

# --- Pea class ---
class Pea:
    def __init__(self):
        self.image = PEA_IMAGE
        self.rect = self.image.get_rect()
        self.rect.center = (100, SCREEN_HEIGHT // 2)
        self.velocity = 0

    def flap(self):
        self.velocity = FLAP_STRENGTH

    def update(self):
        self.velocity += GRAVITY
        self.rect.y += self.velocity

    def draw(self):
        screen.blit(self.image, self.rect)

# --- Pipe class ---
class Pipe:
    def __init__(self, x):
        self.x = x
        self.height = random.randint(100, 400)
        self.top_rect = pygame.Rect(self.x, 0, PIPE_WIDTH, self.height)
        self.bottom_rect = pygame.Rect(self.x, self.height + PIPE_GAP, PIPE_WIDTH, SCREEN_HEIGHT - self.height - PIPE_GAP)

    def update(self):
        self.x -= PIPE_SPEED
        self.top_rect.x = self.x
        self.bottom_rect.x = self.x

    def draw(self):
        pygame.draw.rect(screen, GREEN, self.top_rect)
        pygame.draw.rect(screen, GREEN, self.bottom_rect)

# --- Main game loop ---
def main():
    clock = pygame.time.Clock()
    pea = Pea()
    pipes = [Pipe(SCREEN_WIDTH + i * 300) for i in range(3)]
    score = 0
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    pea.flap()

        # Update game objects
        pea.update()
        for pipe in pipes:
            pipe.update()
            if pipe.x + PIPE_WIDTH < 0:
                pipes.remove(pipe)
                pipes.append(Pipe(SCREEN_WIDTH))
                score += 1

        # Check for collisions
        for pipe in pipes:
            if pea.rect.colliderect(pipe.top_rect) or pea.rect.colliderect(pipe.bottom_rect):
                running = False

        # Draw everything
        screen.fill(WHITE)
        pea.draw()
        for pipe in pipes:
            pipe.draw()

        # Display score
        font = pygame.font.Font(None, 36)
        text = font.render(f'Score: {score}', True, (0, 0, 0))
        screen.blit(text, (10, 10))

        pygame.display.flip()
        clock.tick(30)

    pygame.quit()

# --- Run the game ---
if __name__ == '__main__':
    main()
